use.miden::note
use.miden::account
use.miden::contracts::wallets::basic->wallet

# CALL / PUT OPTION CONTRACT (SWAP_T_R)

# Memory Addresses
# =================================================================================================

# SWAPP Note Inputs (0 to 40)
const.PAYBACK_RECIPIENT_INPUT = 0x0000
const.PAYBACK_RECIPIENT_INPUT_1 = 0x0001
const.PAYBACK_RECIPIENT_INPUT_2 = 0x0002
const.PAYBACK_RECIPIENT_INPUT_3 = 0x0003
const.REQUESTED_ASSET_INPUT = 0x0004
const.REQUESTED_ASSET_1 = 0x0005
const.REQUESTED_ASSET_2 = 0x0006
const.REQUESTED_ASSET_3 = 0x0007
const.PAYBACK_TAG_INPUT=8
const.EXECUTION_HINT_INPUT=9
const.UNDERWRITER_ID_PREFIX=10
const.UNDERWRITER_ID_SUFFIX=11
const.BUYER_ID_PREFIX=12
const.BUYER_ID_SUFFIX=13
const.EXPIRATION=14
const.IS_EUROPEAN=15

# temp addresses
const.IS_EXPIRED=40

# ERRORS
const.NOT_EXPIRED=100

proc.is_underwriter
    exec.account::get_id
    # => [prefix, suffix]

    mem_load.UNDERWRITER_ID_PREFIX
    # => [writer_prefix, prefix, suffix]

    eq
    if.true
        mem_load.UNDERWRITER_ID_SUFFIX
        eq
    else
        drop push.0
    end
    # => [is_underwriter]
end

proc.is_option_buyer
    exec.account::get_id
    # => [prefix, suffix]

    mem_load.BUYER_ID_PREFIX
    # => [writer_prefix, prefix, suffix]

    eq
    if.true
        mem_load.BUYER_ID_SUFFIX
        eq
    else
        drop push.0
    end
    # => [is_option_buyer]
end

#! Sends Assets in Note to Consuming Account
#!
#! Inputs: []
#! Outputs: []
#!
proc.handle_underwriter_reclaim

    # exec.memory::get_blk_timestamp
    # assert blk_timestamp >= expiration
    # 03/23/2025
    push.1742747731

    push.86400 add

    mem_load.EXPIRATION
    # => [expiration, timestamp + 86400]

    gt assert

    push.0 exec.note::get_assets

    mem_loadw.0

    call.wallet::receive_asset

    dropw
end

#! Checks if Option Contract is Consumable
#! Panics if blk_timestamp < expiration
#!
#! Inputs: []
#! Outputs: []
#!
proc.is_consumable
    # exec.memory::get_blk_timestamp
    # assert blk_timestamp >= expiration
    # 03/23/2025
    push.1742747731
    # => [timestamp]

    mem_load.EXPIRATION
    # => [expiration, timestamp]

    gt assert.err=NOT_EXPIRED
    # => []
end

#! Ouputs P2ID Note
#!
#! Inputs: []
#! Outputs: []
#!
proc.output_p2id
    mem_loadw.0
    # => [RECIPIENT]

    push.1.1.0
    # => [aux, note_type, execution_hint, RECIPIENT]

    mem_load.PAYBACK_TAG_INPUT
    # => [tag, aux, note_type, execution_hint, RECIPIENT]

    call.wallet::create_note
    # => [note_idx, pad(15) ...]

    mem_loadw.REQUESTED_ASSET_INPUT
    # => [ASSET, note_idx]

    call.wallet::move_asset_to_note
    # => [ASSET, note_idx, pad(11)]

    dropw drop
    # => []
end

# SWAP_T_R note
# This is a standard swap note that cannot be consumed until after a specified time t
# And is reclaimable by the creator at t + 1 day
# To be a true "options contract", the note would need to be able to be "sellable/settleable"
begin
    push.0 exec.note::get_inputs drop drop

    push.111 debug.stack debug.mem drop

    exec.is_consumable
    # => []

    exec.is_option_buyer
    # => [is_buyer]
    if.true
        # handle swap
        exec.output_p2id

        # consume assets
        push.0 exec.note::get_assets drop drop
        # => []

        mem_loadw.0
        # => [ASSET]

        call.wallet::receive_asset
        # => []
    else
        exec.is_underwriter
        if.true
            exec.handle_underwriter_reclaim
            # => []
        else
            push.0 assert
            # => [panic]
        end
    end
end
