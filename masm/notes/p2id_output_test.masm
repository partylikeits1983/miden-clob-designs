use.miden::note
use.miden::contracts::wallets::basic->wallet

#! Inputs: [SERIAL_NUM, SCRIPT_HASH]
proc.build_p2id_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH]

    padw
    # => [EMPTY_WORD, SERIAL_SCRIPT_HASH]

    push.0.0
    mem_load.17 mem_load.16
    # => [account_suffix, account_prefix, 0, 0, EMPTY_WORD, SERIAL_SCRIPT_HASH]

    push.16 mem_storew dropw
    push.20 mem_storew dropw

    push.8.16

    exec.note::compute_inputs_hash
    # => [INPUTS_HASH, SERIAL_SCRIPT_HASH]

    hmerge
    # => [P2ID_RECIPIENT]
end

begin
    # => [tag, account_prefix, account_suffix, 0]
    debug.stack
    mem_store.100
    debug.stack
    mem_storew.16 dropw

    # get asset
    push.0 exec.note::get_assets drop drop
    # => []

    mem_loadw.0
    # => [ASSET]

    # store asset @ mem addr 4
    mem_storew.4

    swap.3 push.2 div swap.3
    # => [ASSET / 2]

    # store ASSET / 2 @ mem addr 0
    mem_storew.0 dropw
    # => []

    mem_loadw.4
    # => [ASSET]

    call.wallet::receive_asset
    # => []

    # push script hash
    push.5114721150025532103.1324187411136457873.11900545512113364072.1928473465238172547
    # => [P2ID_SCRIPT_HASH]

    # serial num
    push.1.1.1.1
    # => [P2ID_SERIAL_NUM, P2ID_SCRIPT_HASH]

    exec.build_p2id_recipient_hash
    # => [P2ID_RECIPIENT]

    push.1.1.0
    # => [aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    mem_load.100
    # => [tag, aux, note_type, execution_hint, RECIPIENT]

    push.555 debug.stack drop

    call.wallet::create_note
    # => [note_idx, pad(15) ...]

    padw mem_loadw.0
    # => [ASSET / 2, note_idx]

    push.777 debug.stack drop

    call.wallet::move_asset_to_note
    # => [ASSET, note_idx, pad(11)]

    dropw dropw dropw dropw
    # => []
end
