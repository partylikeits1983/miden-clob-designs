# PARTIALLY FILLABALE SWAP NOTE WITH PRICE VERIFIED BY FALCON512 SIGNATURE

# This is an implementation of the SWAP NOTE where price (ask vs offer) is
# based upon the signature of the creator of the swap note.
# this allows for users to update the price of the SWAPP note in near real time

use.miden::note
use.miden::contracts::wallets::basic->wallet

const.M=12289
# PUBLIC-KEY-HASH RECOVERY FROM SIGNATURE
# =============================================================================================

#!   Operand stack: []
#!   Advice stack:  [tau0, tau1, h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
#! Outputs:
#!   Operand stack: [PK_HASH]
proc.falcon_recover_pub_key.16
    ## Load the evaluation point tau from the advice tape, compute its inverse and save both
    ## Note that we will evaluate the polynomials at `tau_inv = tau^{-1}` as we are loading the coefficients
    ## in the normal order i.e., not in reversed order required for Horner evaluation.
    ## This means that the equality we will be checking is
    ## pi(tau_inv) * tau^1023 == h(tau_inv) * tau^511 * s2(tau_inv) * tau^511
    ##
    ## which simplifies to
    ##
    ## pi(tau_inv) * tau == h(tau_inv) * s2(tau_inv)
    adv_push.2
    dup.1 dup.1 ext2inv
    movup.3 movup.3
    loc_storew.4
    # => [tau1, tau0, tau_inv1, tau_inv0, Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...]

    # Load the coefficients of the h polynomial and evaluate it at tau_inv
    exec.eval_tau_inv
    # => [Y, D, C, ptr, tau_inv_ptr, acc1, acc0, ...] where D is the digest expected to be PK hash

    dropw
    # => [D, C, ptr, tau_inv_ptr, acc1, acc0, ...]

    repeat.4
        swapw
        dropw
    end
    # => [D]
end

#! Loads and evaluates s2 at tau_inv
#! Inputs:
#!   Operand stack: [tau1, tau0, tau_inv1, tau_inv0, Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...]
#!   Advice stack:  [tau0, tau1, h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
#! Outputs:
#!   Operand stack: [Y, D, C, ptr, tau_inv_ptr, acc1, acc0, ...] where D is the digest expected to be PK
#!   Advice stack:  [h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
proc.eval_tau_inv
    repeat.64
        adv_pipe

        # check that all coefficients are less than Falcon prime
        dupw.1
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        dupw
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        horner_eval_base

        hperm
    end
end

begin
    push.111 debug.stack drop

    # dropw

    

    # push.0.0.0.0
    # => [KEY]

    adv.push_mapval
    # => [KEY]

    dropw
    # => []

    exec.falcon_recover_pub_key
    # => [PUB_KEY]

    push.222 debug.stack drop

    push.0 exec.note::get_inputs drop drop

    padw mem_loadw.0
    # => [PUB_KEY_INPUTS, PUB_KEY]

    push.333 debug.stack drop

    eqw

    push.444 debug.stack drop
end
