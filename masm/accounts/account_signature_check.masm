use.miden::note
use.miden::contracts::wallets::basic->wallet
use.miden::account
use.std::sys

# constants
const.ITERATIONS_MEM_ADDR=100

const.M=12289
# PUBLIC-KEY-HASH RECOVERY FROM SIGNATURE
# =============================================================================================

#!   Operand stack: []
#!   Advice stack:  [tau0, tau1, h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
#! Outputs:
#!   Operand stack: [PK_HASH]
proc.falcon_recover_pub_key.16
    ## Load the evaluation point tau from the advice tape, compute its inverse and save both
    ## Note that we will evaluate the polynomials at `tau_inv = tau^{-1}` as we are loading the coefficients
    ## in the normal order i.e., not in reversed order required for Horner evaluation.
    ## This means that the equality we will be checking is
    ## pi(tau_inv) * tau^1023 == h(tau_inv) * tau^511 * s2(tau_inv) * tau^511
    ##
    ## which simplifies to
    ##
    ## pi(tau_inv) * tau == h(tau_inv) * s2(tau_inv)
    adv_push.2
    dup.1 dup.1 ext2inv
    movup.3 movup.3
    loc_storew.4
    # => [tau1, tau0, tau_inv1, tau_inv0, Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...]

    # Load the coefficients of the h polynomial and evaluate it at tau_inv
    exec.eval_tau_inv
    # => [Y, D, C, ptr, tau_inv_ptr, acc1, acc0, ...] where D is the digest expected to be PK hash

    dropw
    # => [D, C, ptr, tau_inv_ptr, acc1, acc0, ...]

    repeat.4
        swapw
        dropw
    end
    # => [D]
end

#! Loads and evaluates s2 at tau_inv
#! Inputs:
#!   Operand stack: [tau1, tau0, tau_inv1, tau_inv0, Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...]
#!   Advice stack:  [tau0, tau1, h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
#! Outputs:
#!   Operand stack: [Y, D, C, ptr, tau_inv_ptr, acc1, acc0, ...] where D is the digest expected to be PK
#!   Advice stack:  [h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
proc.eval_tau_inv
    repeat.64
        adv_pipe

        # check that all coefficients are less than Falcon prime
        dupw.1
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        dupw
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        horner_eval_base

        hperm
    end
end

# MULTI-SIG WALLET PoC
# =============================================================================================

# OS => [PUB_KEY]
# AS => []
export.add_signer
    push.222 debug.stack drop

    push.1.1.1.1
    swapw
    # => [PUB_KEY, TRUE]

    # The storage map is in storage slot 1
    push.1
    # => [index, KEY, TRUE]

    # Setting the key value pair in the map
    exec.account::set_map_item
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE]

    dropw dropw dropw dropw
    # => []

    # Incrementing the nonce by 1
    push.1 exec.account::incr_nonce
    # => []

end

# input OS => []
# input AS => [falcon512_sig]
# output => [is_valid_sig]
export.check_signer
    # for signature in signatures:

    call.falcon_recover_pub_key
    # => [PUB_KEY]

    # look up in mapping to see if pub key exists

    push.1
    # => [index, PUB_KEY]

    exec.account::get_map_item
    # => [VALUE]

    push.1.1.1.1
    # => [TRUE, VALUE]

    eqw
    if.true
        # do some state change

        dropw dropw
        push.1
    else
        # panik
        push.0.1 assert_eq
    end
    # => [is_valid_sig]

    exec.sys::truncate_stack
end

# OS => [PUB_KEY_1, PUB_KEY_2, ..., PUB_KEY_10]
export.check_signers

    push.111 debug.stack drop
    mem_storew.4
    mem_storew.8 dropw
    mem_storew.12 dropw
    mem_storew.16 dropw

    repeat.4
        dropw
    end

    push.222 debug.stack drop

    mem_storew.20 dropw
    mem_storew.24 dropw
    mem_storew.28 dropw
    mem_storew.32 dropw
    mem_storew.36 dropw
    mem_storew.40 dropw

    push.222 debug.stack debug.mem drop

    push.1
    # => [count]

    mem_store.0

    push.1
    while.true
        mem_load.0
        # => [count]

        push.4 mul
        # => [mem_addr]

        mem_loadw

        adv.push_mapval

        call.falcon_recover_pub_key
        # => [PUB_KEY]

        push.333 debug.stack drop

        dropw
        # => []

        mem_load.0

        # iterations
        push.3

        lte
        if.true
            mem_load.0
            push.1 add
            mem_store.0

            push.1
        else
            push.0
        end

    end

    exec.sys::truncate_stack
    # => []
end

# OS => [number_of_iterations]
# AS map => {0: SIG_0, 1: SIG_1, n: SIG_N}
export.check_signers_adivce_map
    mem_store.ITERATIONS_MEM_ADDR

    push.0
    # => [count]

    mem_store.0
    # => []

    push.1
    while.true
        mem_load.0
        # => [count]

        push.0.0.0
        # => [KEY]

        adv.push_mapval
        # => [KEY]

        dropw
        # => []

        call.falcon_recover_pub_key
        # => [PUB_KEY]

        push.333 debug.stack drop

        dropw
        # => []

        mem_load.0

        # iterations
        # push.ITERATIONS
        mem_load.ITERATIONS_MEM_ADDR

        lt
        if.true
            mem_load.0
            push.1 add
            mem_store.0

            push.1
        else
            push.0
        end

    end

    # increment nonce to simulate state change
    push.1 exec.account::incr_nonce

    exec.sys::truncate_stack
    # => []
end
